generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                       String                       @id @default(uuid())
  email                    String                       @unique
  password                 String
  name                     String
  icon                     String?
  role                     Role                         @default(USER)
  orders                   Order[]
  wishlist                 Product[]                    @relation("UserWishlist")
  cartItems                CartItem[]
  reviews                  Review[]
  searchHistory            SearchHistoryItem[]    
  isSuspended              Boolean                      @default(false)

  preferredLanguage        Language                     @default(en)
  colorTheme               ColorTheme                   @default(AUTO)
  shippingAddress          String?
  paymentMethod            String?

  createdAt                DateTime                     @default(now())
  updatedAt                DateTime                     @updatedAt
}

model SearchHistoryItem {
  id                       String                       @id @default(uuid())
  user                     User                         @relation(fields: [userId], references: [id])
  userId                   String
  query                    String

  createdAt                DateTime                     @default(now())
  updatedAt                DateTime                     @updatedAt

  @@index([userId])
}

model Product {
  id                       String                       @id @default(uuid())
  name                     String
  description              String?
  price                    Decimal                      @db.Decimal(10, 2)
  stock                    Int                          @default(0)
  status                   ProductStatus                @default(ACTIVE)
  sale                     Sale?                        @relation(fields: [saleId], references: [id])
  saleId                   String?
  wishlistedBy             User[]                       @relation("UserWishlist")

  tags                     Tag[]
  images                   ProductImage[]
  cartItems                CartItem[]
  orderItems               OrderItem[]
  reviews                  Review[]

  createdAt                DateTime                     @default(now())
  updatedAt                DateTime                     @updatedAt

  @@index([status])
  @@index([name])
}

model Tag {
  id                       String                       @id @default(uuid())
  key                      String
  value                    String
  products                 Product[]
}

model ProductImage {
  id                       String                       @id @default(uuid())
  imageURL                 String
  position                 Int
  product                  Product                      @relation(fields: [productId], references: [id])
  productId                String

  @@index([productId])
}

model CartItem {
  id                       String                       @id @default(uuid())
  user                     User                         @relation(fields: [userId], references: [id])
  userId                   String
  product                  Product                      @relation(fields: [productId], references: [id])
  productId                String
  quantity                 Int

  @@unique([userId, productId])
}

model Order {
  id                       String                       @id @default(uuid())
  user                     User                         @relation(fields: [userId], references: [id])
  userId                   String
  total                    Int
  status                   OrderStatus                  @default(PENDING)
  orderItems               OrderItem[]

  createdAt                DateTime                     @default(now())
  updatedAt                DateTime                     @updatedAt

  paidAt                   DateTime?
  shippedAt                DateTime?
  deliveredAt              DateTime?
  canceledAt               DateTime?
}

model OrderItem {
  id                       String                       @id @default(uuid())
  order                    Order                        @relation(fields: [orderId], references: [id])
  orderId                  String
  product                  Product                      @relation(fields: [productId], references: [id])
  productId                String
  quantity                 Int
  price                    Decimal                      @db.Decimal(10, 2)
}

model Sale {
  id                       String                       @id @default(uuid())
  name                     String

  discount                 Float                        @default(0)
  products                 Product[]
}

model Review {
  id                       String                       @id @default(uuid())
  user                     User                         @relation(fields: [userId], references: [id])
  userId                   String
  product                  Product                      @relation(fields: [productId], references: [id])
  productId                String
  score                    Int                          
  text                     String?
  
  createdAt                DateTime                     @default(now())
  updatedAt                DateTime                     @updatedAt
}



enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

enum Role {
  USER
  ADMIN
}

enum ProductStatus {
  ACTIVE
  DELISTED
}

enum Language {
  en
  ka
}

enum ColorTheme {
  AUTO
  LIGHT
  DARK
}